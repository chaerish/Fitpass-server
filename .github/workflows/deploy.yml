name: CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

        ## 스프링부트 yml 파일 생성
      - name: make application-prod.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yml

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      ## 도커 빌드 후 도커 허브에 push
      - name: docker build and push to docker hub
        run: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
          sudo docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }} . 
          sudo docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}

      ## Docker
      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOSTNAME }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_KEY }}
          envs: GITHUB_SHA
          script: |
            set -e
            
            BASE_PORT_A=${{ secrets.BASE_PORT_A }}
            BASE_PORT_B=${{ secrets.BASE_PORT_B }}
            APP_PORT=${{ secrets.APP_PORT }}
            NETWORK=${{ secrets.DOCKER_NETWORK }}
            GREEN_CONTAINER=${{ secrets.GREEN_CONTAINER }}
            BLUE_CONTAINER=${{ secrets.BLUE_CONTAINER }}
            NGINX_CONFIG=${{ secrets.NGINX_CONFIG }}
            
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
            
            current_port=$(grep 'service_url\s\+127.0.0.1:' $NGINX_CONFIG | head -1 | sed 's/.*127.0.0.1://;s/;//')
            echo "현재 Nginx upstream 포트: $current_port"

            if [ "$current_port" = "$BASE_PORT_A" ]; then
              BLUE_PORT=$BASE_PORT_A
              GREEN_PORT=$BASE_PORT_B
            else
              BLUE_PORT=$BASE_PORT_B
              GREEN_PORT=$BASE_PORT_A
            fi

            HEALTH_URL="http://127.0.0.1:$GREEN_PORT/actuator/health"
            
            docker stop $GREEN_CONTAINER || true
            sleep 5
            docker rm $GREEN_CONTAINER || true
            sleep 5
            
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
            sudo docker run -d \
            --name $GREEN_CONTAINER \
            --network $NETWORK \
            --restart always \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e TZ=Asia/Seoul \
            -e JAVA_OPTS='-Duser.timezone=Asia/Seoul' \
            -p $GREEN_PORT:$APP_PORT \
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}
            
            echo "Green 컨테이너 헬스체크 시작"
            for i in {1..10}; do
              status_code=$(curl -s -o /dev/null -w '%{http_code}' $HEALTH_URL || echo "000")
              echo "응답 코드: $status_code"
              if [ "$status_code" = "200" ]; then
                echo "헬스체크 통과"
                break
              fi
              echo "재시도 $i/10"
              sleep 10
            done
            
            if [ "$status_code" != "200" ]; then
              echo "Green 환경 헬스체크 실패"
              exit 1
            fi
            
            echo "Nginx 트래픽 전환"
            sudo sed -i "s/service_url\s\+127.0.0.1:$BLUE_PORT;/service_url 127.0.0.1:$GREEN_PORT;/g" $NGINX_CONFIG
            sudo nginx -s reload

            echo "기존 Blue 컨테이너 정리"
            docker rm -f $BLUE_CONTAINER || true
            docker rename $GREEN_CONTAINER $BLUE_CONTAINER

            echo "미사용 이미지 정리 (dangling)"
            docker rmi -f $(docker images -f "dangling=true" -q) || true

            echo "배포 완료"